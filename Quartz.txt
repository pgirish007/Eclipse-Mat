<dependencies>
    <dependency>
        <groupId>org.quartz-scheduler</groupId>
        <artifactId>quartz</artifactId>
        <version>2.3.2</version>
    </dependency>
    <dependency>
        <groupId>com.oracle.database.jdbc</groupId>
        <artifactId>ojdbc8</artifactId>
        <version>19.8.0.0</version>
    </dependency>
</dependencies>



# Scheduler name and instance ID
org.quartz.scheduler.instanceName = MyClusteredScheduler
org.quartz.scheduler.instanceId = AUTO

# Thread pool configuration
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 10
org.quartz.threadPool.threadPriority = 5

# JobStore configuration
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.oracle.OracleDelegate
org.quartz.jobStore.useProperties = false
org.quartz.jobStore.dataSource = myDS
org.quartz.jobStore.tablePrefix = QRTZ_
org.quartz.jobStore.isClustered = true
org.quartz.jobStore.clusterCheckinInterval = 20000

# DataSource configuration
org.quartz.dataSource.myDS.driver = ${db.driver}
org.quartz.dataSource.myDS.URL = ${db.url}
org.quartz.dataSource.myDS.user = ${db.user}
org.quartz.dataSource.myDS.password = ${db.password}
org.quartz.dataSource.myDS.maxConnections = 5


Create separate properties files for each environment, e.g., quartz-dev.properties, quartz-test.properties, and quartz-prod.properties.

db.driver = oracle.jdbc.OracleDriver
db.url = jdbc:oracle:thin:@//dev-host:1521/devdb
db.user = devuser
db.password = devpassword





CREATE TABLE QRTZ_JOB_DETAILS (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    JOB_NAME VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);

-- Other tables...

CREATE TABLE QRTZ_LOCKS (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    LOCK_NAME VARCHAR2(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);





import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class QuartzPropertiesLoader {

    public static Properties loadProperties(String environment) throws IOException {
        Properties properties = new Properties();

        // Load common properties
        try (InputStream commonPropsStream = QuartzPropertiesLoader.class.getClassLoader().getResourceAsStream("quartz.properties")) {
            if (commonPropsStream != null) {
                properties.load(commonPropsStream);
            } else {
                throw new IOException("Common quartz.properties file not found.");
            }
        }

        // Load environment-specific properties
        String envPropsFileName = "quartz-" + environment + ".properties";
        try (InputStream envPropsStream = QuartzPropertiesLoader.class.getClassLoader().getResourceAsStream(envPropsFileName)) {
            if (envPropsStream != null) {
                Properties envProperties = new Properties();
                envProperties.load(envPropsStream);
                properties.putAll(envProperties);
            } else {
                throw new IOException("Environment-specific properties file not found: " + envPropsFileName);
            }
        }

        return properties;
    }
}




import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import java.io.IOException;
import java.util.Properties;

import static org.quartz.SimpleScheduleBuilder.simpleSchedule;

@WebListener
public class QuartzListener implements ServletContextListener {

    private Scheduler scheduler;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        try {
            // Determine the environment (e.g., from a system property or environment variable)
            String environment = System.getenv("QUARTZ_ENV");
            if (environment == null || environment.isEmpty()) {
                environment = "dev"; // default to dev if not set
            }

            // Load properties
            Properties properties = QuartzPropertiesLoader.loadProperties(environment);

            // Initialize the Quartz Scheduler with loaded properties
            StdSchedulerFactory factory = new StdSchedulerFactory();
            factory.initialize(properties);
            scheduler = factory.getScheduler();

            // Define the job and tie it to our MyJob class
            JobDetail job = JobBuilder.newJob(MyJob.class)
                .withIdentity("myJob", "group1")
                .build();

            // Trigger the job to run now, and then every 40 seconds
            Trigger trigger = TriggerBuilder.newTrigger()
                .withIdentity("myTrigger", "group1")
                .startNow()
                .withSchedule(simpleSchedule()
                    .withIntervalInSeconds(40)
                    .repeatForever())
                .build();

            // Schedule the job using the scheduler
            scheduler.scheduleJob(job, trigger);

            // Start the scheduler
            scheduler.start();
        } catch (SchedulerException | IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        try {
            if (scheduler != null) {
                scheduler.shutdown();
            }
        } catch (SchedulerException e) {
            e.printStackTrace();
        }
    }
}


import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class MyJob implements Job {
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        System.out.println("Hello, Quartz! Executing MyJob.");
    }
}





<listener>
    <listener-class>com.example.QuartzListener</listener-class>
</listener>






# Scheduler name and instance ID
org.quartz.scheduler.instanceName = MyClusteredScheduler
org.quartz.scheduler.instanceId = AUTO

# Thread pool configuration
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 10
org.quartz.threadPool.threadPriority = 5

# JobStore configuration
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.oracle.OracleDelegate
org.quartz.jobStore.useProperties = false
org.quartz.jobStore.dataSource = myDS
org.quartz.jobStore.tablePrefix = QRTZ_
org.quartz.jobStore.isClustered = true
org.quartz.jobStore.clusterCheckinInterval = 20000

# DataSource configuration using JNDI
org.quartz.dataSource.myDS.jndiURL = java:comp/env/jdbc/QuartzDS
org.quartz.dataSource.myDS.java.naming.factory.initial = com.sun.jndi.rmi.registry.RegistryContextFactory





import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import java.io.IOException;
import java.util.Properties;

import static org.quartz.SimpleScheduleBuilder.simpleSchedule;

@WebListener
public class QuartzListener implements ServletContextListener {

    private Scheduler scheduler;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        try {
            // Determine the environment (e.g., from a system property or environment variable)
            String environment = System.getenv("QUARTZ_ENV");
            if (environment == null || environment.isEmpty()) {
                environment = "dev"; // default to dev if not set
            }

            // Load properties
            Properties properties = QuartzPropertiesLoader.loadProperties(environment);

            // Initialize the Quartz Scheduler with loaded properties
            StdSchedulerFactory factory = new StdSchedulerFactory();
            factory.initialize(properties);
            scheduler = factory.getScheduler();

            // Define the job and tie it to our MyJob class
            JobDetail job = JobBuilder.newJob(MyJob.class)
                .withIdentity("myJob", "group1")
                .build();

            // Trigger the job to run now, and then every 40 seconds
            Trigger trigger = TriggerBuilder.newTrigger()
                .withIdentity("myTrigger", "group1")
                .startNow()
                .withSchedule(simpleSchedule()
                    .withIntervalInSeconds(40)
                    .repeatForever())
                .build();

            // Schedule the job using the scheduler
            scheduler.scheduleJob(job, trigger);

            // Start the scheduler
            scheduler.start();
        } catch (SchedulerException | IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        try {
            if (scheduler != null) {
                scheduler.shutdown();
            }
        } catch (SchedulerException e) {
            e.printStackTrace();
        }
    }
}




import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class RetrieveSuccessJob implements Job {
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        // Logic to retrieve successful data
        System.out.println("Retrieving successful data...");
        // Your code here
    }
}



import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class RetrieveFailureJob implements Job {
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        // Logic to retrieve failure data
        System.out.println("Retrieving failure data...");
        // Your code here
    }
}



import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import java.io.IOException;
import java.util.Properties;

import static org.quartz.SimpleScheduleBuilder.simpleSchedule;

@WebListener
public class QuartzListener implements ServletContextListener {

    private Scheduler scheduler;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        try {
            // Determine the environment (e.g., from a system property or environment variable)
            String environment = System.getenv("QUARTZ_ENV");
            if (environment == null || environment.isEmpty()) {
                environment = "dev"; // default to dev if not set
            }

            // Load properties
            Properties properties = QuartzPropertiesLoader.loadProperties(environment);

            // Initialize the Quartz Scheduler with loaded properties
            StdSchedulerFactory factory = new StdSchedulerFactory();
            factory.initialize(properties);
            scheduler = factory.getScheduler();

            // Define the job and tie it to our RetrieveSuccessJob class
            JobDetail successJob = JobBuilder.newJob(RetrieveSuccessJob.class)
                .withIdentity("retrieveSuccessJob", "group1")
                .build();

            // Define the job and tie it to our RetrieveFailureJob class
            JobDetail failureJob = JobBuilder.newJob(RetrieveFailureJob.class)
                .withIdentity("retrieveFailureJob", "group2")
                .build();

            // Trigger for the success job to run now, and then every 40 seconds
            Trigger successTrigger = TriggerBuilder.newTrigger()
                .withIdentity("successTrigger", "group1")
                .startNow()
                .withSchedule(simpleSchedule()
                    .withIntervalInSeconds(40)
                    .repeatForever())
                .build();

            // Trigger for the failure job to run now, and then every 60 seconds
            Trigger failureTrigger = TriggerBuilder.newTrigger()
                .withIdentity("failureTrigger", "group2")
                .startNow()
                .withSchedule(simpleSchedule()
                    .withIntervalInSeconds(60)
                    .repeatForever())
                .build();

            // Schedule the jobs using the scheduler
            scheduler.scheduleJob(successJob, successTrigger);
            scheduler.scheduleJob(failureJob, failureTrigger);

            // Start the scheduler
            scheduler.start();
        } catch (SchedulerException | IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        try {
            if (scheduler != null) {
                scheduler.shutdown();
            }
        } catch (SchedulerException e) {
            e.printStackTrace();
        }
    }
}



